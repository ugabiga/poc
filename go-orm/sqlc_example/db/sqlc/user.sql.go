// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
insert into users (first_name, last_name)
VALUES ($1, $2)
returning id, first_name, last_name, updated_at, created_at
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserWithTodo = `-- name: GetUserWithTodo :many
select u.id, first_name, last_name, u.updated_at, u.created_at, t.id, title, description, status, t.updated_at, t.created_at, user_id
from users as u
         left join todos t on u.id = t.user_id
where u.id = $1
`

type GetUserWithTodoRow struct {
	ID          int64          `json:"id"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	UpdatedAt   time.Time      `json:"updated_at"`
	CreatedAt   time.Time      `json:"created_at"`
	ID_2        sql.NullInt64  `json:"id_2"`
	Title       sql.NullString `json:"title"`
	Description sql.NullString `json:"description"`
	Status      Status         `json:"status"`
	UpdatedAt_2 sql.NullTime   `json:"updated_at_2"`
	CreatedAt_2 sql.NullTime   `json:"created_at_2"`
	UserID      sql.NullInt64  `json:"user_id"`
}

func (q *Queries) GetUserWithTodo(ctx context.Context, id int64) ([]GetUserWithTodoRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserWithTodo, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserWithTodoRow{}
	for rows.Next() {
		var i GetUserWithTodoRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.ID_2,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.UpdatedAt_2,
			&i.CreatedAt_2,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
