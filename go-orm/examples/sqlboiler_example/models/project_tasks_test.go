// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProjectTasks(t *testing.T) {
	t.Parallel()

	query := ProjectTasks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProjectTasksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectTasksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProjectTasks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectTasksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectTaskSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProjectTasksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProjectTaskExists(ctx, tx, o.ProjectID, o.TaskID)
	if err != nil {
		t.Errorf("Unable to check if ProjectTask exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProjectTaskExists to return true, but got false.")
	}
}

func testProjectTasksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	projectTaskFound, err := FindProjectTask(ctx, tx, o.ProjectID, o.TaskID)
	if err != nil {
		t.Error(err)
	}

	if projectTaskFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProjectTasksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProjectTasks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProjectTasksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProjectTasks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProjectTasksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	projectTaskOne := &ProjectTask{}
	projectTaskTwo := &ProjectTask{}
	if err = randomize.Struct(seed, projectTaskOne, projectTaskDBTypes, false, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}
	if err = randomize.Struct(seed, projectTaskTwo, projectTaskDBTypes, false, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectTaskOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectTaskTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectTasks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProjectTasksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	projectTaskOne := &ProjectTask{}
	projectTaskTwo := &ProjectTask{}
	if err = randomize.Struct(seed, projectTaskOne, projectTaskDBTypes, false, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}
	if err = randomize.Struct(seed, projectTaskTwo, projectTaskDBTypes, false, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = projectTaskOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = projectTaskTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func projectTaskBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectTask) error {
	*o = ProjectTask{}
	return nil
}

func projectTaskAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectTask) error {
	*o = ProjectTask{}
	return nil
}

func projectTaskAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProjectTask) error {
	*o = ProjectTask{}
	return nil
}

func projectTaskBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectTask) error {
	*o = ProjectTask{}
	return nil
}

func projectTaskAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProjectTask) error {
	*o = ProjectTask{}
	return nil
}

func projectTaskBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectTask) error {
	*o = ProjectTask{}
	return nil
}

func projectTaskAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProjectTask) error {
	*o = ProjectTask{}
	return nil
}

func projectTaskBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectTask) error {
	*o = ProjectTask{}
	return nil
}

func projectTaskAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProjectTask) error {
	*o = ProjectTask{}
	return nil
}

func testProjectTasksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProjectTask{}
	o := &ProjectTask{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, projectTaskDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProjectTask object: %s", err)
	}

	AddProjectTaskHook(boil.BeforeInsertHook, projectTaskBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	projectTaskBeforeInsertHooks = []ProjectTaskHook{}

	AddProjectTaskHook(boil.AfterInsertHook, projectTaskAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	projectTaskAfterInsertHooks = []ProjectTaskHook{}

	AddProjectTaskHook(boil.AfterSelectHook, projectTaskAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	projectTaskAfterSelectHooks = []ProjectTaskHook{}

	AddProjectTaskHook(boil.BeforeUpdateHook, projectTaskBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	projectTaskBeforeUpdateHooks = []ProjectTaskHook{}

	AddProjectTaskHook(boil.AfterUpdateHook, projectTaskAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	projectTaskAfterUpdateHooks = []ProjectTaskHook{}

	AddProjectTaskHook(boil.BeforeDeleteHook, projectTaskBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	projectTaskBeforeDeleteHooks = []ProjectTaskHook{}

	AddProjectTaskHook(boil.AfterDeleteHook, projectTaskAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	projectTaskAfterDeleteHooks = []ProjectTaskHook{}

	AddProjectTaskHook(boil.BeforeUpsertHook, projectTaskBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	projectTaskBeforeUpsertHooks = []ProjectTaskHook{}

	AddProjectTaskHook(boil.AfterUpsertHook, projectTaskAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	projectTaskAfterUpsertHooks = []ProjectTaskHook{}
}

func testProjectTasksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectTasksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(projectTaskColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProjectTaskToOneProjectUsingProject(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectTask
	var foreign Project

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectTaskDBTypes, false, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, projectDBTypes, false, projectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Project struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProjectID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Project().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectTaskSlice{&local}
	if err = local.L.LoadProject(ctx, tx, false, (*[]*ProjectTask)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Project = nil
	if err = local.L.LoadProject(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Project == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectTaskToOneTaskUsingTask(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProjectTask
	var foreign Task

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, projectTaskDBTypes, false, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, taskDBTypes, false, taskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Task struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TaskID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Task().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ProjectTaskSlice{&local}
	if err = local.L.LoadTask(ctx, tx, false, (*[]*ProjectTask)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Task = nil
	if err = local.L.LoadTask(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Task == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testProjectTaskToOneSetOpProjectUsingProject(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectTask
	var b, c Project

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectTaskDBTypes, false, strmangle.SetComplement(projectTaskPrimaryKeyColumns, projectTaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, projectDBTypes, false, strmangle.SetComplement(projectPrimaryKeyColumns, projectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Project{&b, &c} {
		err = a.SetProject(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Project != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectTasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProjectID != x.ID {
			t.Error("foreign key was wrong value", a.ProjectID)
		}

		if exists, err := ProjectTaskExists(ctx, tx, a.ProjectID, a.TaskID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testProjectTaskToOneSetOpTaskUsingTask(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProjectTask
	var b, c Task

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, projectTaskDBTypes, false, strmangle.SetComplement(projectTaskPrimaryKeyColumns, projectTaskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, taskDBTypes, false, strmangle.SetComplement(taskPrimaryKeyColumns, taskColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Task{&b, &c} {
		err = a.SetTask(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Task != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProjectTasks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TaskID != x.ID {
			t.Error("foreign key was wrong value", a.TaskID)
		}

		if exists, err := ProjectTaskExists(ctx, tx, a.ProjectID, a.TaskID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testProjectTasksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectTasksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProjectTaskSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProjectTasksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProjectTasks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	projectTaskDBTypes = map[string]string{`ProjectID`: `bigint`, `TaskID`: `bigint`, `UpdatedAt`: `timestamp with time zone`, `CreatedAt`: `timestamp with time zone`}
	_                  = bytes.MinRead
)

func testProjectTasksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(projectTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(projectTaskAllColumns) == len(projectTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProjectTasksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(projectTaskAllColumns) == len(projectTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProjectTask{}
	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, projectTaskDBTypes, true, projectTaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(projectTaskAllColumns, projectTaskPrimaryKeyColumns) {
		fields = projectTaskAllColumns
	} else {
		fields = strmangle.SetComplement(
			projectTaskAllColumns,
			projectTaskPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProjectTaskSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProjectTasksUpsert(t *testing.T) {
	t.Parallel()

	if len(projectTaskAllColumns) == len(projectTaskPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProjectTask{}
	if err = randomize.Struct(seed, &o, projectTaskDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectTask: %s", err)
	}

	count, err := ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, projectTaskDBTypes, false, projectTaskPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProjectTask struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProjectTask: %s", err)
	}

	count, err = ProjectTasks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
