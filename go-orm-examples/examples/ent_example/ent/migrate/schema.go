// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"todo", "in_progress", "done"}},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "note", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"todo", "in_progress", "done"}},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "task_children", Type: field.TypeInt, Nullable: true},
		{Name: "user_tasks", Type: field.TypeInt, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_tasks_children",
				Columns:    []*schema.Column{TasksColumns[6]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "tasks_users_tasks",
				Columns:    []*schema.Column{TasksColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "birthday", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "DATE"}},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// ProjectTasksColumns holds the columns for the "project_tasks" table.
	ProjectTasksColumns = []*schema.Column{
		{Name: "project_id", Type: field.TypeInt},
		{Name: "task_id", Type: field.TypeInt},
	}
	// ProjectTasksTable holds the schema information for the "project_tasks" table.
	ProjectTasksTable = &schema.Table{
		Name:       "project_tasks",
		Columns:    ProjectTasksColumns,
		PrimaryKey: []*schema.Column{ProjectTasksColumns[0], ProjectTasksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "project_tasks_project_id",
				Columns:    []*schema.Column{ProjectTasksColumns[0]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "project_tasks_task_id",
				Columns:    []*schema.Column{ProjectTasksColumns[1]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ProjectsTable,
		TasksTable,
		UsersTable,
		ProjectTasksTable,
	}
)

func init() {
	TasksTable.ForeignKeys[0].RefTable = TasksTable
	TasksTable.ForeignKeys[1].RefTable = UsersTable
	ProjectTasksTable.ForeignKeys[0].RefTable = ProjectsTable
	ProjectTasksTable.ForeignKeys[1].RefTable = TasksTable
}
